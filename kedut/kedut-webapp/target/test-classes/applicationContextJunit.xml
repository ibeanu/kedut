<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd       
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- <context:component-scan base-package="com.kedut.directory.dao"/> -->

	<!-- <import resource="annotation.xml"/> <import resource="marshalling.xml"/> -->

	<!-- Property configurer -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">

		<!-- typed as a java.util.Properties -->
		<property name="location">
			<value>classpath:kedut.properties</value>
		</property>
	</bean>

	<tx:annotation-driven />

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver.name}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<value>
				<!-- hibernate.hbm2ddl.auto=create -->
				hibernate.dialect=${db.dialect}
				hibernate.show_sql=true
				hibernate.format_sql=true
				hibernate.use_sql_comments=true
				hibernate.cache.use_query_cache=false
				hibernate.connection.pool_size=10
			</value>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>com.kedut.directory.model.Contact</value>
				<value>com.kedut.directory.model.Business</value>
				<value>com.kedut.directory.model.BusinessCategory</value>
				<value>com.kedut.directory.model.ProductCategory</value>
				<value>com.kedut.directory.model.Address</value>
				<value>com.kedut.directory.model.Product</value>
				<!-- <value>com.kedut.directory.model.Review</value> -->
				<value>com.kedut.directory.model.Subscription</value>
				<!-- <value>com.kedut.directory.model.User</value> -->
			</list>
		</property>

	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean class="com.kedut.directory.dao.BusinessCategoryDaoHibernate"></bean>
	<bean class="com.kedut.directory.dao.ProductCategoryDaoHibernate"></bean>
	<bean class="com.kedut.directory.dao.AddressDaoHibernate"></bean>
	<bean class="com.kedut.directory.dao.BusinessDaoHibernate"></bean>
	<bean class="com.kedut.directory.dao.SubscriptionDaoHibernate"></bean>
	<bean class="com.kedut.directory.dao.ProductDaoHibernate"></bean>
	<bean class="com.kedut.directory.dao.ContactDaoHibernate"></bean>

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate" />

	<!-- Spy Memcached -->

	<!-- depending upon the connection settings in ${MEMCACHED_SERVERS} this 
		will use a binary or ascii connection to the memcached -->
	
	<bean id="memcachedFactory" class="com.kedut.directory.cache.spy.SpyMemcachedClientFactoryBean"
		destroy-method="close">

		<!-- don't care if cache isn't available, just act as though you aren't 
			there, so my app doesn't fail, but runs slow. Slow is better than not working 
			at all. -->
		<property name="failSilently" value="true" />
		<property name="hosts" value="${memcached.host}"/>

	</bean>


	<bean id="memcached" class="com.kedut.directory.cache.spy.SpyMemcachedCache" destroy-method="destroy">
		<constructor-arg ref="memcachedFactory" />

		<!-- timeout for asynchronous get operations -->
		<property name="accessTimeoutInMillis" value="500" />

		<!-- expiry time for items in the cache, in seconds -->
		<property name="evictionTimeout" value="3600" />

		<!-- timeout for asyncronous set operations -->
		<property name="modificationTimeoutInMillis" value="500" />

		<!-- don't care if you fail -->
		<property name="failSilently" value="true" />

		<!-- timeout for asynchronous set operations, by default will not wait -->
		<property name="setTimeoutInMillis" value="500" />

	</bean>
</beans>